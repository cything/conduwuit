name: CI and Artifacts

on:
    pull_request:
    push:
        paths-ignore:
          - '.gitlab-ci.yml'
          - '.gitignore'
          - 'renovate.json'
          - 'debian/**'
          - 'docker/**'
        branches:
            - main
        tags:
          - '*'
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

concurrency:
    group: ${{ github.head_ref || github.ref_name }}
    cancel-in-progress: true

env:
    # Required to make some things output color
    TERM: ansi
    # Publishing to my nix binary cache
    ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}
    # Just in case incremental is still being set to true, speeds up CI
    CARGO_INCREMENTAL: 0
    # Custom nix binary cache if fork is being used
    ATTIC_ENDPOINT: ${{ vars.ATTIC_ENDPOINT }}
    ATTIC_PUBLIC_KEY: ${{ vars.ATTIC_PUBLIC_KEY }}
    # Get error output from nix that we can actually use, and use our binary caches for the earlier CI steps
    NIX_CONFIG: |
      show-trace = true
      extra-substituters = https://attic.kennel.juneis.dog/conduwuit https://attic.kennel.juneis.dog/conduit https://conduwuit.cachix.org https://aseipp-nix-cache.freetls.fastly.net https://cdn.cy7.sh/main
      extra-trusted-public-keys = conduit:eEKoUwlQGDdYmAI/Q/0slVlegqh/QmAvQd7HBSm21Wk= conduwuit:BbycGUgTISsltcmH0qNjFR9dbrQNYgdIAcmViSGoVTE= conduwuit.cachix.org-1:MFRm6jcnfTf0jSAbmvLfhO3KBMt4px+1xaereWXp8Xg= main:Ku31HoEWcBtfggge2VGj+QTkVrQuIwRIMGyfV/5VQP0=
      experimental-features = nix-command flakes
      extra-experimental-features = nix-command flakes
      accept-flake-config = true
    GH_REF_NAME: ${{ github.ref_name }}
    WEBSERVER_DIR_NAME: ${{ (github.head_ref != '' && format('merge-{0}-{1}', github.event.number, github.event.pull_request.user.login)) || github.ref_name }}-${{ github.sha }}

permissions: {}

jobs:
    tests:
        name: Test
        runs-on: ubuntu-24.04
        steps:
            - name: Install liburing
              run: |
                  sudo apt install liburing-dev -y

            - name: Free up a bit of runner space
              run: |
                  set +o pipefail
                  sudo docker image prune --all --force || true
                  sudo apt purge -y 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-cloud-cli google-chrome-stable firefox powershell microsoft-edge-stable || true
                  sudo apt clean
                  sudo rm -rf /usr/local/lib/android /usr/local/julia* /usr/local/games /usr/local/sqlpackage /usr/local/share/powershell /usr/local/share/edge_driver /usr/local/share/gecko_driver /usr/local/share/chromium /usr/local/share/chromedriver-linux64 /usr/lib/google-cloud-sdk /usr/lib/jvm /usr/lib/mono /usr/local/lib/heroku /usr/lib/heroku /usr/local/share/boost /usr/share/dotnet /usr/local/bin/cmake* /usr/local/bin/stack /usr/local/bin/terraform /opt/microsoft/powershell /opt/hostedtoolcache/CodeQL /opt/hostedtoolcache/go /opt/hostedtoolcache/PyPy /usr/local/bin/sam || true
                  set -o pipefail

            - name: Sync repository
              uses: actions/checkout@v4
              with:
                persist-credentials: false

            - uses: nixbuild/nix-quick-install-action@master

            - name: Restore and cache Nix store
              # we want a fresh-state when we do releases/tags to avoid potential cache poisoning attacks impacting
              # releases and tags
              #if: ${{ !startsWith(github.ref, 'refs/tags/') }}
              uses: nix-community/cache-nix-action@v6
              with:
                # restore and save a cache using this key
                primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/.lock') }}
                # if there's no cache hit, restore a cache by this prefix
                restore-prefixes-first-match: nix-${{ runner.os }}-
                # collect garbage until Nix store size (in bytes) is at most this number
                # before trying to save a new cache
                gc-max-store-size-linux: 2073741824
                # do purge caches
                purge: true
                # purge all versions of the cache
                purge-prefixes: nix-${{ runner.os }}-
                # created more than this number of seconds ago relative to the start of the `Post Restore` phase
                purge-last-accessed: 86400
                # except the version with the `primary-key`, if it exists
                purge-primary-key: never

            - name: Prepare build environment
              run: |
                  echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"
                  nix profile install --inputs-from . nixpkgs#direnv nixpkgs#nix-direnv
                  direnv allow
                  nix develop .#all-features --command true

            - name: Cache CI dependencies
              run: |
                  bin/nix-build-and-cache ci
                  bin/nix-build-and-cache just '.#devShells.x86_64-linux.default'
                  bin/nix-build-and-cache just '.#devShells.x86_64-linux.all-features'
                  bin/nix-build-and-cache just '.#devShells.x86_64-linux.dynamic'

            - name: Run Complement tests
              env:
                CARGO_PROFILE: "test"
              run: |
                  # the nix devshell sets $COMPLEMENT_SRC, so "/dev/null" is no-op
                  direnv exec . bin/complement "/dev/null" complement_test_logs.jsonl complement_test_results.jsonl > >(tee -a test_output.log)
                  cp -v -f result complement_oci_image.tar.gz

            - name: Upload Complement OCI image
              uses: actions/upload-artifact@v4
              with:
                name: complement_oci_image.tar.gz
                path: complement_oci_image.tar.gz
                if-no-files-found: error
                compression-level: 0

            - name: Upload Complement logs
              uses: actions/upload-artifact@v4
              with:
                name: complement_test_logs.jsonl
                path: complement_test_logs.jsonl
                if-no-files-found: error

            - name: Upload Complement results
              uses: actions/upload-artifact@v4
              with:
                name: complement_test_results.jsonl
                path: complement_test_results.jsonl
                if-no-files-found: error

            - name: Diff Complement results with checked-in repo results
              run: |
                  diff -u --color=always tests/test_results/complement/test_results.jsonl complement_test_results.jsonl > >(tee -a complement_diff_output.log)

            - name: Update Job Summary
              env:
                GH_JOB_STATUS: ${{ job.status }}
              if: success() || failure()
              run: |
                  if [ ${GH_JOB_STATUS} == 'success' ]; then
                      echo '# ✅ CI completed suwuccessfully' >> $GITHUB_STEP_SUMMARY
                  else
                      echo '# ❌ CI failed (last 100 lines of output)' >> $GITHUB_STEP_SUMMARY
                      echo '```' >> $GITHUB_STEP_SUMMARY
                      tail -n 100 test_output.log | sed 's/\x1b\[[0-9;]*m//g' >> $GITHUB_STEP_SUMMARY
                      echo '```' >> $GITHUB_STEP_SUMMARY

                      echo '# Complement diff results (last 100 lines)' >> $GITHUB_STEP_SUMMARY
                      echo '```diff' >> $GITHUB_STEP_SUMMARY
                      tail -n 100 complement_diff_output.log | sed 's/\x1b\[[0-9;]*m//g' >> $GITHUB_STEP_SUMMARY
                      echo '```' >> $GITHUB_STEP_SUMMARY
                  fi

    build:
        name: Build
        runs-on: ubuntu-24.04
        strategy:
            matrix:
                include:
                    - target: aarch64-linux-musl
                    - target: x86_64-linux-musl
        steps:
            - name: Free up a bit of runner space
              run: |
                  set +o pipefail
                  sudo docker image prune --all --force || true
                  sudo apt purge -y 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-cloud-cli google-chrome-stable firefox powershell microsoft-edge-stable || true
                  sudo apt clean
                  sudo rm -rf /usr/local/lib/android /usr/local/julia* /usr/local/games /usr/local/sqlpackage /usr/local/share/powershell /usr/local/share/edge_driver /usr/local/share/gecko_driver /usr/local/share/chromium /usr/local/share/chromedriver-linux64 /usr/lib/google-cloud-sdk /usr/lib/jvm /usr/lib/mono /usr/local/lib/heroku /usr/lib/heroku /usr/local/share/boost /usr/share/dotnet /usr/local/bin/cmake* /usr/local/bin/stack /usr/local/bin/terraform /opt/microsoft/powershell /opt/hostedtoolcache/CodeQL /opt/hostedtoolcache/go /opt/hostedtoolcache/PyPy /usr/local/bin/sam || true
                  set -o pipefail

            - name: Sync repository
              uses: actions/checkout@v4
              with:
                persist-credentials: false

            - uses: nixbuild/nix-quick-install-action@master

            - name: Restore and cache Nix store
              # we want a fresh-state when we do releases/tags to avoid potential cache poisoning attacks impacting
              # releases and tags
              #if: ${{ !startsWith(github.ref, 'refs/tags/') }}
              uses: nix-community/cache-nix-action@v6
              with:
                # restore and save a cache using this key
                primary-key: nix-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/*.nix', '**/.lock') }}
                # if there's no cache hit, restore a cache by this prefix
                restore-prefixes-first-match: nix-${{ runner.os }}-
                # collect garbage until Nix store size (in bytes) is at most this number
                # before trying to save a new cache
                gc-max-store-size-linux: 2073741824
                # do purge caches
                purge: true
                # purge all versions of the cache
                purge-prefixes: nix-${{ runner.os }}-
                # created more than this number of seconds ago relative to the start of the `Post Restore` phase
                purge-last-accessed: 86400
                # except the version with the `primary-key`, if it exists
                purge-primary-key: never

            - name: Prepare build environment
              run: |
                  echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"
                  nix profile install --impure --inputs-from . nixpkgs#direnv nixpkgs#nix-direnv
                  direnv allow
                  nix develop .#all-features --command true --impure

            # use rust-cache
            - uses: Swatinem/rust-cache@v2
              # we want a fresh-state when we do releases/tags to avoid potential cache poisoning attacks impacting
              # releases and tags
              #if: ${{ !startsWith(github.ref, 'refs/tags/') }}
              with:
                cache-all-crates: "true"
                cache-on-failure: "true"
                cache-targets: "true"

            - name: Build static ${{ matrix.target }}-all-features
              run: |
                  if [[ ${{ matrix.target }} == "x86_64-linux-musl" ]]
                  then
                    CARGO_DEB_TARGET_TUPLE="x86_64-unknown-linux-musl"
                  elif [[ ${{ matrix.target }} == "aarch64-linux-musl" ]]
                  then
                    CARGO_DEB_TARGET_TUPLE="aarch64-unknown-linux-musl"
                  fi

                  SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)

                  bin/nix-build-and-cache just .#static-${{ matrix.target }}-all-features

                  mkdir -v -p target/release/
                  mkdir -v -p target/$CARGO_DEB_TARGET_TUPLE/release/
                  cp -v -f result/bin/conduwuit target/release/conduwuit
                  cp -v -f result/bin/conduwuit target/$CARGO_DEB_TARGET_TUPLE/release/conduwuit
                  direnv exec . cargo deb --verbose --no-build --no-strip -p conduwuit --target=$CARGO_DEB_TARGET_TUPLE --output target/release/${{ matrix.target }}.deb
                  mv -v target/release/conduwuit static-${{ matrix.target }}
                  mv -v target/release/${{ matrix.target }}.deb ${{ matrix.target }}.deb

            - name: Build static x86_64-linux-musl-all-features-x86_64-haswell-optimised
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              run: |
                  CARGO_DEB_TARGET_TUPLE="x86_64-unknown-linux-musl"
                  SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)

                  bin/nix-build-and-cache just .#static-x86_64-linux-musl-all-features-x86_64-haswell-optimised

                  mkdir -v -p target/release/
                  mkdir -v -p target/$CARGO_DEB_TARGET_TUPLE/release/
                  cp -v -f result/bin/conduwuit target/release/conduwuit
                  cp -v -f result/bin/conduwuit target/$CARGO_DEB_TARGET_TUPLE/release/conduwuit
                  direnv exec . cargo deb --verbose --no-build --no-strip -p conduwuit --target=$CARGO_DEB_TARGET_TUPLE --output target/release/x86_64-linux-musl-x86_64-haswell-optimised.deb
                  mv -v target/release/conduwuit static-x86_64-linux-musl-x86_64-haswell-optimised
                  mv -v target/release/x86_64-linux-musl-x86_64-haswell-optimised.deb x86_64-linux-musl-x86_64-haswell-optimised.deb

            # quick smoke test of the x86_64 static release binary
            - name: Quick smoke test the x86_64 static release binary
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              run: |
                  # GH actions default runners are x86_64 only
                  if file result/bin/conduwuit | grep x86-64; then
                    result/bin/conduwuit --version
                    result/bin/conduwuit --help
                    result/bin/conduwuit -Oserver_name="'$(date -u +%s).local'" -Odatabase_path="'/tmp/$(date -u +%s)'" --execute "server admin-notice awawawawawawawawawawa" --execute "server memory-usage" --execute "server shutdown"
                  fi

            - name: Build static debug ${{ matrix.target }}-all-features
              run: |
                  if [[ ${{ matrix.target }} == "x86_64-linux-musl" ]]
                  then
                    CARGO_DEB_TARGET_TUPLE="x86_64-unknown-linux-musl"
                  elif [[ ${{ matrix.target }} == "aarch64-linux-musl" ]]
                  then
                    CARGO_DEB_TARGET_TUPLE="aarch64-unknown-linux-musl"
                  fi

                  SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)

                  bin/nix-build-and-cache just .#static-${{ matrix.target }}-all-features-debug

                  # > warning: dev profile is not supported and will be a hard error in the future. cargo-deb is for making releases, and it doesn't make sense to use it with dev profiles.
                  # so we need to coerce cargo-deb into thinking this is a release binary
                  mkdir -v -p target/release/
                  mkdir -v -p target/$CARGO_DEB_TARGET_TUPLE/release/
                  cp -v -f result/bin/conduwuit target/release/conduwuit
                  cp -v -f result/bin/conduwuit target/$CARGO_DEB_TARGET_TUPLE/release/conduwuit
                  direnv exec . cargo deb --verbose --no-build --no-strip -p conduwuit --target=$CARGO_DEB_TARGET_TUPLE --output target/release/${{ matrix.target }}-debug.deb
                  mv -v target/release/conduwuit static-${{ matrix.target }}-debug
                  mv -v target/release/${{ matrix.target }}-debug.deb ${{ matrix.target }}-debug.deb

            # quick smoke test of the x86_64 static debug binary
            - name: Run x86_64 static debug binary
              run: |
                  # GH actions default runners are x86_64 only
                  if file result/bin/conduwuit | grep x86-64; then
                    result/bin/conduwuit --version
                  fi

            # check validity of produced deb package, invalid debs will error on these commands
            - name: Validate produced deb package
              run: |
                  # List contents
                  dpkg-deb --contents ${{ matrix.target }}.deb
                  dpkg-deb --contents ${{ matrix.target }}-debug.deb
                  # List info
                  dpkg-deb --info ${{ matrix.target }}.deb
                  dpkg-deb --info ${{ matrix.target }}-debug.deb

            - name: Upload static-x86_64-linux-musl-all-features-x86_64-haswell-optimised to GitHub
              uses: actions/upload-artifact@v4
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              with:
                  name: static-x86_64-linux-musl-x86_64-haswell-optimised
                  path: static-x86_64-linux-musl-x86_64-haswell-optimised
                  if-no-files-found: error

            - name: Upload static-${{ matrix.target }}-all-features to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: static-${{ matrix.target }}
                  path: static-${{ matrix.target }}
                  if-no-files-found: error

            - name: Upload static deb ${{ matrix.target }}-all-features to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: deb-${{ matrix.target }}
                  path: ${{ matrix.target }}.deb
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload static-x86_64-linux-musl-all-features-x86_64-haswell-optimised to webserver
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    chmod +x static-x86_64-linux-musl-x86_64-haswell-optimised
                    scp static-x86_64-linux-musl-x86_64-haswell-optimised website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/static-x86_64-linux-musl-x86_64-haswell-optimised
                  fi

            - name: Upload static-${{ matrix.target }}-all-features to webserver
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    chmod +x static-${{ matrix.target }}
                    scp static-${{ matrix.target }} website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/static-${{ matrix.target }}
                  fi

            - name: Upload static deb x86_64-linux-musl-all-features-x86_64-haswell-optimised to webserver
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp x86_64-linux-musl-x86_64-haswell-optimised.deb website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/x86_64-linux-musl-x86_64-haswell-optimised.deb
                  fi

            - name: Upload static deb ${{ matrix.target }}-all-features to webserver
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp ${{ matrix.target }}.deb website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/${{ matrix.target }}.deb
                  fi

            - name: Upload static-${{ matrix.target }}-debug-all-features to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: static-${{ matrix.target }}-debug
                  path: static-${{ matrix.target }}-debug
                  if-no-files-found: error

            - name: Upload static deb ${{ matrix.target }}-debug-all-features to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: deb-${{ matrix.target }}-debug
                  path: ${{ matrix.target }}-debug.deb
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload static-${{ matrix.target }}-debug-all-features to webserver
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp static-${{ matrix.target }}-debug website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/static-${{ matrix.target }}-debug
                  fi

            - name: Upload static deb ${{ matrix.target }}-debug-all-features to webserver
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp ${{ matrix.target }}-debug.deb website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/${{ matrix.target }}-debug.deb
                  fi

            - name: Build OCI image ${{ matrix.target }}-all-features
              run: |
                  bin/nix-build-and-cache just .#oci-image-${{ matrix.target }}-all-features

                  cp -v -f result oci-image-${{ matrix.target }}.tar.gz

            - name: Build OCI image x86_64-linux-musl-all-features-x86_64-haswell-optimised
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              run: |
                  bin/nix-build-and-cache just .#oci-image-x86_64-linux-musl-all-features-x86_64-haswell-optimised

                  cp -v -f result oci-image-x86_64-linux-musl-all-features-x86_64-haswell-optimised.tar.gz

            - name: Build debug OCI image ${{ matrix.target }}-all-features
              run: |
                  bin/nix-build-and-cache just .#oci-image-${{ matrix.target }}-all-features-debug

                  cp -v -f result oci-image-${{ matrix.target }}-debug.tar.gz

            - name: Upload OCI image x86_64-linux-musl-all-features-x86_64-haswell-optimised to GitHub
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-x86_64-linux-musl-all-features-x86_64-haswell-optimised
                  path: oci-image-x86_64-linux-musl-all-features-x86_64-haswell-optimised.tar.gz
                  if-no-files-found: error
                  compression-level: 0
            - name: Upload OCI image ${{ matrix.target }}-all-features to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-${{ matrix.target }}
                  path: oci-image-${{ matrix.target }}.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload OCI image ${{ matrix.target }}-debug-all-features to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-${{ matrix.target }}-debug
                  path: oci-image-${{ matrix.target }}-debug.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload OCI image x86_64-linux-musl-all-features-x86_64-haswell-optimised.tar.gz to webserver
              if: ${{ matrix.target == 'x86_64-linux-musl' }}
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp oci-image-x86_64-linux-musl-all-features-x86_64-haswell-optimised.tar.gz website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/oci-image-x86_64-linux-musl-all-features-x86_64-haswell-optimised.tar.gz
                  fi

            - name: Upload OCI image ${{ matrix.target }}-all-features to webserver
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp oci-image-${{ matrix.target }}.tar.gz website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/oci-image-${{ matrix.target }}.tar.gz
                  fi

            - name: Upload OCI image ${{ matrix.target }}-debug-all-features to webserver
              run: |
                  if [ ! -z $SSH_WEBSITE ]; then
                    scp oci-image-${{ matrix.target }}-debug.tar.gz website:/var/www/girlboss.ceo/~strawberry/conduwuit/ci-bins/${WEBSERVER_DIR_NAME}/oci-image-${{ matrix.target }}-debug.tar.gz
                  fi

    variables: 
      outputs:
        github_repository: ${{ steps.var.outputs.github_repository }}
      runs-on: "ubuntu-latest"
      steps:
        - name: Setting global variables
          uses: actions/github-script@v7
          id: var
          with:
            script: |
              core.setOutput('github_repository', '${{ github.repository }}'.toLowerCase())
